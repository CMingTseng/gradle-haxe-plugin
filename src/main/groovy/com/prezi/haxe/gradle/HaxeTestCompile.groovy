package com.prezi.haxe.gradle

import org.gradle.api.DomainObjectSet
import org.gradle.language.base.LanguageSourceSet

/**
 * Created by lptr on 20/05/14.
 */
class HaxeTestCompile extends HaxeCompile {

	@Override
	void compile() {
		def workDir = getWorkingDirectory()
		workDir.delete() || workDir.deleteDir()
		workDir.mkdirs()

		super.compile()
	}

	@Override
	protected HaxeCommandBuilder configureHaxeCommandBuilder(File output, DomainObjectSet<LanguageSourceSet> sources) {
		def workDir = getWorkingDirectory()
		def testsDir = getTestsDirectory()

		project.copy {
			from super.getSourceDirectories(sources)
			into testsDir
		}

		def cmd = ["haxelib", "run", "munit", "gen", testsDir.name]
		CommandExecutor.execute(project, cmd, workDir) { ExecutionResult result ->
			if (result.exitValue != 0)
			{
				throw new RuntimeException("Command finished with non-zero exit value (${result.exitValue}):\n${cmd.join(" ")}")
			}
		}

		// Delete ExampleTest.hx generated by MUnit
		new File(testsDir, "ExampleTest.hx").delete()
		def suite = new File(testsDir, "TestSuite.hx")
		if (suite) {
			def suiteText = suite.text
			suite.delete()
			suite << suiteText.tokenize("\n").findAll { !(it ==~ /(import |\s*add\()ExampleTest\)?;/) }.join("\n")
		}

		return super.configureHaxeCommandBuilder(output, sources)
	}

	@Override
	protected String getMainClass() {
		return "TestMain"
	}

	@Override
	protected Set<File> getSourceDirectories(DomainObjectSet<LanguageSourceSet> sources) {
		[getTestsDirectory()]
	}

	File getTestsDirectory() {
		return new File(getWorkingDirectory(), "tests")
	}

	File workingDirectory
	public workingDirectory(Object workingDirectory) {
		this.workingDirectory = project.file(workingDirectory)
	}
}
